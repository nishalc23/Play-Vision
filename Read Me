# Sports Video Highlight Generator 🏀⚽

An AI-powered tool that automatically generates highlight clips from sports videos using computer vision and smart event detection.

## 🚀 Features

- **Automatic Object Detection**: Detect players and balls using YOLOv8
- **Smart Event Recognition**: Identify scoring moments, high-activity scenes, and key plays
- **Multi-Sport Support**: Basketball and soccer with extensible architecture
- **Intelligent Clip Merging**: Combine nearby events into coherent sequences
- **Professional Output**: Generate individual clips and combined highlight reels
- **Detailed Analytics**: JSON reports with timestamps and event analysis

## 📦 Installation

### Prerequisites
- Python 3.8+
- Git

### Quick Install
```bash
git clone https://github.com/yourusername/sports-highlight-generator.git
cd sports-highlight-generator
pip install -r requirements.txt
```

### Development Install
```bash
git clone https://github.com/yourusername/sports-highlight-generator.git
cd sports-highlight-generator
pip install -e .
```

## 🎯 Quick Start

### Basic Usage
```bash
# Generate highlights from a basketball game
python -m src.cli.main --input game.mp4 --output highlights/ --sport basketball

# Process a soccer match
python -m src.cli.main --input match.mp4 --output soccer_highlights/ --sport soccer
```

### Advanced Options
```bash
python -m src.cli.main \
  --input video.mp4 \
  --output highlights/ \
  --sport basketball \
  --confidence 0.6 \
  --sample-rate 3 \
  --model yolov8m.pt \
  --no-reel
```

### Python API
```python
from src.core.analyzer import SportsAnalyzer
from src.core.processor import VideoProcessor

# Initialize components
analyzer = SportsAnalyzer(model_path="yolov8n.pt")
processor = VideoProcessor()

# Load and analyze video
analyzer.load_video("game.mp4")
highlights = analyzer.analyze_video(sport_type="basketball")

# Extract clips
processor.extract_clips(highlights, output_dir="highlights/")
```

## 📊 Output Structure

```
highlights/
├── highlight_01_potential_score_03m45s.mp4
├── highlight_02_high_activity_12m30s.mp4
├── highlight_03_merged_sequence_18m15s.mp4
├── highlight_reel.mp4                    # Combined reel
└── analysis_report.json                  # Detailed analysis
```

## ⚙️ Configuration

### Command Line Options

| Option | Description | Default |
|--------|-------------|---------|
| `--input, -i` | Input video file path | Required |
| `--output, -o` | Output directory | `highlights` |
| `--sport, -s` | Sport type (`basketball`, `soccer`) | `basketball` |
| `--model, -m` | YOLO model path | `yolov8n.pt` |
| `--confidence, -c` | Detection confidence threshold | `0.5` |
| `--sample-rate, -r` | Analyze every Nth frame | `2` |
| `--no-reel` | Skip creating combined highlight reel | `False` |

### Configuration File
Create `config/user_settings.py` to customize default parameters:

```python
# Detection settings
CONFIDENCE_THRESHOLD = 0.6
MODEL_PATH = "yolov8m.pt"

# Analysis settings
BALL_VELOCITY_THRESHOLD = 60
GOAL_AREA_THRESHOLD = 0.12
SAMPLE_RATE = 2

# Output settings
DEFAULT_CLIP_DURATION = 6.0
PADDING_SECONDS = 2.0
```

## 🏗️ Architecture

### Core Components

- **`src.core.detector`**: Object detection using YOLO
- **`src.core.analyzer`**: Event detection and highlight identification
- **`src.core.processor`**: Video processing and clip extraction
- **`src.utils`**: Utility functions and helpers
- **`src.cli`**: Command-line interface

### Event Detection Heuristics

1. **Ball Velocity Analysis**: Fast ball movement indicates action moments
2. **Goal Area Detection**: Identifies scoring opportunities based on spatial positioning
3. **Player Density**: High player concentration suggests important plays
4. **Temporal Clustering**: Groups nearby events into coherent sequences

## 📈 Performance

### Benchmarks
- **Processing Speed**: ~2-4x real-time on modern GPUs
- **Memory Usage**: ~2-4GB RAM for 1080p videos
- **Accuracy**: ~75-85% highlight detection rate (varies by sport and video quality)

### Optimization Tips
- Use GPU acceleration: `pip install torch[cuda]`
- Increase `--sample-rate` for faster processing
- Use lighter models: `yolov8n.pt` vs `yolov8x.pt`

## 🧪 Testing

```bash
# Run all tests
pytest tests/

# Run specific test module
pytest tests/test_analyzer.py

# Run with coverage
pytest --cov=src tests/
```

## 🤝 Contributing

We welcome contributions! Please see [CONTRIBUTING.md](docs/CONTRIBUTING.md) for guidelines.

### Development Setup
```bash
git clone https://github.com/yourusername/sports-highlight-generator.git
cd sports-highlight-generator
pip install -e ".[dev]"
pre-commit install
```

### Code Style
We use Black for code formatting and flake8 for linting:
```bash
black src/ tests/
flake8 src/ tests/
mypy src/
```

## 📚 Documentation

- [API Documentation](docs/API.md)
- [Contributing Guide](docs/CONTRIBUTING.md)
- [Architecture Overview](docs/ARCHITECTURE.md)

## 🔮 Roadmap

### Version 1.1
- [ ] Real-time processing for live streams
- [ ] Advanced event classification (fouls, assists, etc.)
- [ ] Custom model training pipeline
- [ ] Web dashboard interface

### Version 1.2
- [ ] Multi-camera support
- [ ] Player tracking and identification
- [ ] Statistical analysis and heatmaps
- [ ] Cloud deployment options

## 🐛 Known Issues

- Some false positives in crowded scenes
- Goal area detection needs sport-specific tuning
- Memory usage can be high for very long videos

## 📄 License

MIT License - see [LICENSE](LICENSE) file for details.

## 🙏 Acknowledgments

- [Ultralytics YOLOv8](https://github.com/ultralytics/ultralytics) for object detection
- [MoviePy](https://github.com/Zulko/moviepy) for video processing
- [OpenCV](https://opencv.org/) for computer vision utilities

## 📞 Support

- **Issues**: [GitHub Issues](https://github.com/yourusername/sports-highlight-generator/issues)
- **Discussions**: [GitHub Discussions](https://github.com/yourusername/sports-highlight-generator/discussions)
- **Email**: your.email@domain.com

---

Made with ❤️ for sports fans and developers
